# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - master
    - production

  # blacklist
  except:
    - gh-pages

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

# Start builds on tags only (GitHub and BitBucket)
skip_non_tags: true

# Skipping commits with particular message or from specific user
skip_commits:
  message: /Created.*\.(png|jpg|jpeg|bmp|gif)/      # Regex for matching commit message

#  author: John                                      # Commit author's username, name, email or regexp maching one of these.

# Including commits with particular message or from specific user
# only_commits:
#   message: /build/                # Start a new build if message contains 'build'
#   author: jack@company.com        # Start a new build for commit of user with email jack@company.com

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#skip_commits:
#  files:
#    - docs/*
#    - '**/*.html'

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
# init:
#   - git config --global core.autocrlf input


# # clone directory
# clone_folder: c:\projects\myproject

# # fetch repository as zip archive
# shallow_clone: true                 # default is "false"

# # set clone depth
# clone_depth: 5                      # clone entire repository history if not defined

# # setting up etc\hosts file
# hosts:
#   queue-server: 127.0.0.1
#   db.server.com: 127.0.0.2

# # environment variables
# environment:
#   my_var1: value1
#   my_var2: value2
#   # this is how to set encrypted variable. Go to "Encrypt data" page in account menu to encrypt data.
#   my_secure_var1:
#     secure: FW3tJ3fMncxvs58/ifSP7w==

# # environment:
# #  global:
# #    connection_string: server=12;password=13;
# #    service_url: https://127.0.0.1:8090
# #
# #  matrix:
# #  - db: mysql
#    provider: mysql
#
#  - db: mssql
#    provider: mssql
#    password:
#      secure: $#(JFDA)jQ@#$

# this is how to allow failing jobs in the matrix
matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.
  # allow_failures:
  #   - platform: x86
  #     configuration: Debug
  #   - platform: x64
  #     configuration: Release

# exclude configuration from the matrix. Works similarly to 'allow_failures' but build not even being started for excluded combination.
  # exclude:
  #   - platform: x86
  #     configuration: Debug

# # build cache to preserve files/folders between builds
# cache:
#   - packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
#   - projectA\libs
#   - node_modules                    # local npm modules
#   - '%LocalAppData%\NuGet\Cache'    # NuGet < v3
#   - '%LocalAppData%\NuGet\v3-cache' # NuGet v3

# enable service required for build/tests
# services:
#   - mssql2014           # start SQL Server 2014 Express
#   - mssql2014rs         # start SQL Server 2014 Express and Reporting Services
#   - mssql2012sp1        # start SQL Server 2012 SP1 Express
#   - mssql2012sp1rs      # start SQL Server 2012 SP1 Express and Reporting Services
#   - mssql2008r2sp2      # start SQL Server 2008 R2 SP2 Express
#   - mssql2008r2sp2rs    # start SQL Server 2008 R2 SP2 Express and Reporting Services
#   - mysql               # start MySQL 5.6 service
#   - postgresql          # start PostgreSQL 9.5 service
#   - iis                 # start IIS
#   - msmq                # start Queuing services
#   - mongodb             # start MongoDB

# scripts that run after cloning repository
install:
  # by default, all script lines are interpreted as batch
  - cmd: pip install numpy
  - cmd: pip install mathplotlib
  - cmd: pip install opencv-python
  - cmd: pip install pyinstaller 
  # to run script as a PowerShell command prepend it with ps:
  # - ps: Write-Host 'This is PowerShell'
  # batch commands start from cmd:
  #- cmd: echo This is batch again
  #- cmd: set MY_VAR=12345

# enable patching of AssemblyInfo.* files
# assembly_info:
#   patch: true
#   file: AssemblyInfo.*
#   assembly_version: "2.2.{build}"
#   assembly_file_version: "{version}"
#   assembly_informational_version: "{version}"


# Automatically register private account and/or project AppVeyor NuGet feeds.
# nuget:
#   account_feed: true
#   project_feed: true
#   disable_publish_on_pr: true     # disable publishing of .nupkg artifacts to
#                                   # account/project feeds for pull request builds

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Any CPU

# to add several platforms to build matrix:
#platform:
#  - x86
#  - Any CPU

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# to add several configurations to build matrix:
#configuration:
#  - Debug
#  - Release

# build:
#   parallel: true                  # enable MSBuild parallel builds
#   project: MyTestAzureCS.sln      # path to Visual Studio solution or project
#   publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
#   publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
#   publish_azure: true             # package Azure Cloud Service projects and push to artifacts
#   publish_nuget: true             # package projects with .nuspec files and push to artifacts
#   publish_nuget_symbols: true     # generate and publish NuGet symbol packages
#   include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts

  # MSBuild verbosity level

# scripts to run before build
before_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# scripts to run after build
after_build:

# to run your custom scripts instead of automatic MSBuild
build_script:
  - pyinstaller find_area.py
  - pyinstaller find_angle.py
# to disable automatic builds
#build: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:

  # pushing a single file
  - path: find_area

  # pushing a single file with environment variable in path and "Deployment name" specified
  #- path: MyProject\bin\$(configuration)
  #  name: myapp

  # pushing entire folder as a zip archive
  #- path: logs

  # pushing all *.nupkg files in build directory recursively
  #- path: '**\*.nupkg'


#---------------------------------#
#     deployment configuration    #
#---------------------------------#

# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
deploy:

    # FTP deployment provider settings
  # - provider: FTP
  #   protocol: ftp|ftps|sftp
  #   host: ftp.myserver.com
  #   username: admin
  #   password:
  #     secure: eYKZKFkkEvFYWX6NfjZIVw==
  #   folder:
  #   application:
  #   active_mode: false
  #   beta: true      # enable alternative FTP library for 'ftp' and 'ftps' modes
  #   debug: true     # show complete FTP log

    # Deploy to GitHub Releases
  - provider: GitHub
    artifact: find_area           # upload all NuGet packages to release assets
    draft: false
    prerelease: false
    on:
      branch: master                # release from master branch only
      appveyor_repo_tag: true       # deploy on tag push only

# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
#deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
# on_success:
#   - do something

# # on build failure
# on_failure:
#   - do something

# # after build failure or success
# on_finish:
#   - do something


#---------------------------------#
#         notifications           #
#---------------------------------#

# notifications:

#   # Email
#   - provider: Email
#     to:
#       - user1@email.com
#       - user2@email.com
#     subject: 'Build {{status}}'                  # optional
#     message: "{{message}}, {{commitId}}, ..."    # optional
#     on_build_status_changed: true
